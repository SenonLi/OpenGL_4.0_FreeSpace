0. Try to update both MFC and Qt GUI with basic libraries.
0.1 vsSenOpenGL is a trial and collection for learning and practicing only basically, 
but the final aim should be an engine / graphic library with enough 3D metrology functions.
vsSenOpenGL should be split into non-UI library, which could be used by MFC GUI engine and Qt GUI engine.
0.2 When implementing Qt ui libarary, try to put Qt lirbaries into GraphicUsr to get rid of Qt tools.

1. Learn how to use Git Tag.
2. Add QImage Support with library in GraphicUsr into SLDigitalImageProcess library.
3. vsSenOpenGL -> Project Properties -> General -> Project Defaults -> Character Set -> Use Unicode Character Set
4. Set up the highest Warning -> Error compiler, and fix all the errors!
5.0 Change project vsSenOpenGL to SLGLFW3DPlayer that can refer SLInternalUtility and SLDigitalImageProcess libraries.

window_QT.h 
#define QT_WINDOWS_H
-------------------------------------------------------------------------------------------------------------------------------------------
* Libs Requirements:

* Qt5Testd.lib          // QTest
* Qt5Cored.lib          // qt_assert, qBadAlloc, qFlagLocation, QArrayData, QByteArray, QChar, QCoreApplication, QDate, QDebug, QEvent,
*                       // QFile, QFileDevice, QFileInfo, QFutureInterfaceBase, QGenericArgument, QGenericReturnArgument, QLineF,
*                       // QListData, QMapDataBase, QMapNodeBase, QMessageLogger, QMetaObject, QMutex, QMutexLocker, QObject, QPoint,
*                       // QPointF, QRect, QRectF, QReturnArgument, QRunnable, QSettings, QSize, QString, QThread, QThreadPool, QTimer,
*                       // QUnhandledException, QVariant, QVarLengthArray, QWaitCondition, QtPrivate, QtSharedPointer.
* -----------------------------------------------------------------------------------------------------------------------------------------
* Qt5Guid.lib           // QCursor, QFlags, QFont, QFontMetrics, QIcon, QImage, QKeyEvent, QKeySequence, QBrush, QPainter, QPen, QPixmap,
*                       // QPoint, QRegion, QSize, QTransform, QWheelEvent,
* -----------------------------------------------------------------------------------------------------------------------------------------
* Qt5OpenGLd.lib        // QGLWidget

* Qt5Widgetsd.lib       // QAbstractButton, QAbstractSlider, QAbstractScrollArea, QAction, QApplication, QBoxLayout,
*                       // QButtonGroup, QCheckBox, QFileDialog, QFrame, QGraphicsView, QHBoxLayout, QInputDialog, QLabel,
*                       // QLayout, QLayoutItem, QList, QMenu, QPaintDevice, QPushButton, QRadioButton, QShortcut,
*                       // QSlider, QStatusBar, QToolBar, QWidget


5. Add QImage support into SLQt3DPlayer; And replace all CImage with template application of SLImage
6. Add Linux support!

Library:
0. slutil  -> SLInternalUtility;     Handle memory, string, and other related base class
1. sldip   -> SLDigitalImageProcess
2. slgeom  -> Geometry

## Unicode binary 3rd Libraries:
OpenCV 3.4.1 : Remember to configure in CMake GUI instead of cmd when compiling the OpenCV library !!!
1. Change Modules library to static (lib);
2. Change Modules target extension to .lib;
3. Change C++ Code Generation -> Runtime Library -> Multi-threaded Debug DLL (/MDd);
4. Make sure Modules output folder is where the test_examples are looking for.


## Handle TCHAR
	pathLength = swprintf_s(finalPath, 200, L"String:    %s\n", s);
	pathLength += swprintf_s(finalPath + pathLength, 200 - pathLength, _T("Character: %c\n"), c);

## Sort of CImage is GdiPlus and CBitmap is MFC. You can do something like this:
In GDI, all DIBs are bottom-up.
CBitmap bmp;  
CImage img;
bmp = CBitmap::FromHandle(img.Detach());

## Collision Detection
* Axis-Aligned Bounding Box
* Circle to AABB, Clamp --> Closest Point

## Perfect Cube Logo
Add Stencil Test for Perfect Logo, such that first draw Logo with Stencil Buffer, second draw Scene base on Stencil Buffer

## texture disappear Problems:
* One of the shader initialization problems happens: program (important), projection, view, model
* (Z-fighting) :
Sometime, the later texture(plane) always lose in the Z-fighting if two textures are on the same plane.
Pay attention the order of painting.


## Notes:

### OpenGL
* State Machine Nature : any state that is changed by things that happen main will still be in effect when display is called for the first time, and any state that display changes will still be in effect the next time display is called.

### Geometry Shader
* A geometry shader does not receive strips, fans, or loops. The geometry shader receives the assembled primitives. So if the draw command specifies triangle strips, the geometry shader actually receives triangles.

### Camera View
* Problem: screen "shakes" a lot whenever the CameraView (mouse move) changes direction
  Solution: decrease the sensitivity of mouse move (pitch, yaw, scroll).
### Texture
* Parameter: 

-magnification
-minification

### Color Buffer
* Default: reset to (clean) 0x00.

### Depth Buffer
* Default: reset to (clean) 0x01.

### Stencil Buffer
* Default: reset to (clean) 0x00.
* Tip: stencil test (stencil Func) first, check to draw the fragment or not; 
       stencil buffer updating (stencil Oper) second (depends of stencil Mask).

### Blending
* technique to implement Transparency within objects.
* Transparency : objects (or parts of them) not having a solid color, but having a
combination of colors from the object itself and any other object behind it with varying intensity.
* The amount of transparency of an object is defined by its color’s alpha value.
* Occluding Problem: manually sort, draw the windows in the background first

### Text Blend using FreeType (load TrueType fonts)
* FT_Set_Pixel_Sizes: Setting the width to 0 lets the face dynamically calculate the width based on the given height.
* For each character, we retrieve glyph, generate a texture, set its options and store its metrics.
* use GL_RED as the glyph texture’s internalFormat and format arguments
* TrueType texture 8-bit grayscale: (restriction of OpenGL) glPixelStorei(GL_UNPACK_ALIGNMENT, 1);