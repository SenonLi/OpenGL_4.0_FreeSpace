
## Complier & Linker
* Linking involves packaging together all of the .obj files built from your source files, as well as any .lib files you reference, into your output (eg .exe or .dll).
* Without incremental linking, this has to be done from scratch each time.
* Incremental linking links your exe/dll in a way which makes it easier for the linker to update the existing exe/dll when you make a small change and re-compile.
* So, incremental linking just makes it faster to compile and link your project.
* The only runtime effect it might have is that it may make your exe/dll slightly bigger and slower, as decribed here:
http://msdn.microsoft.com/en-us/library/4khtbfyf.aspx
* You may want to use incremental linking for debug builds to speed development, but disable it for release builds to improve runtime performance.



Input Libraries:
cmake -G "Visual Studio 17 Win64" ..

Typical Bug #1:
/NODEFAULTLIB:msvcrtd.lib;      // For avoid warning after using GLFW_GLEW
  warning LNK4098: defaultlib 'msvcrtd.lib' conflicts with use of other libs;
  Solution: 
  1. add "/NODEFAULTLIB:library;" to project settings "linker" -> "Input" -> "Additional Dependencies";
  2. Recompile GLFW to get new GLFW3.lib, with exact same setting with you solution, for both Release and Debug

Typical Bug #2:
LINK : warning LNK4068: /MACHINE not specified; defaulting to X86
Culprit: When adding resource in slgeom, resource compiling need to link;
			however, slgeom is static library instead of executable, there is no settings of "Linker";
			by default no where to set /MACHINE:x86
Solution:
	"Librarian" -> "Command Line" -> "Additional Options", input "/MACHINE:x86"

Typical Bug #3:
warning LNK4020: a type record in 'SLGeometry_ib_1.pdb' is corrupted; some symbols and types may not be accessible from the debugger
Culprit: the update from old VisualStudio to New added "Whole Program Optimization" in General
Solution: in release of crupted project, set "Whole Program Optimization" to "No Whole Program Optimization"

Typical Bug #4:
warning C4471: 'SLLibreColorType': a forward declaration of an unscoped enumeration must have an underlying type
Culprit: In C++11, you can add an explicit type to an unscoped enumeration and to its forward declaration.
Solution: enum Example : unsigned {}. Add : type (int/unsigned) at the end of the enum definition and forward declaration.

opencv_world341.lib;            // OpenCV Image Process, using official Dynamic OpenCV library, but still need a small static lib
glew32.lib;                     // OpenGL function extension Wrangller
glfw3.lib;                      // UI window creation
opengl32.lib;                   // Basic OpenGL requirement


Attension !! :
Stay away from Win32 Release with OpenCV static library, because the static OpenCV will cost 2GB memory for Visual Studio to link, 
make it supper slow for the whole solution even for Win64 dynamic test.

Win32 Special:
OpenCV self-compiled library for 32bit static libraries:
OpenCV Release:
Additional Library Directory: 
S:\OpenCV3\Lib32\LeastCombinedStatic\Release;S:\OpenCV3\Lib32\3rd_Party\Release;

Input Libariy:
opencv_world341.lib
libjpeg.lib
libpng.lib
libtiff.lib
zlib.lib

OpenCV Debug:
Additional Library Directory: 
S:\OpenCV3\Lib32\LeastCombinedStatic\Debug;S:\OpenCV3\Lib32\3rd_Party\Debug;

Input Libariy:
opencv_world341d.lib
libjpegd.lib
libpngd.lib
libtiffd.lib
zlibd.lib



